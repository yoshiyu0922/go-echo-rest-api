// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/message": {
            "get": {
                "description": "search messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "search messages",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "メッセージID",
                        "name": "message_id",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "ユーザID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "タイトル",
                        "name": "title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "メッセージ",
                        "name": "message",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Message"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error_handling.APIError"
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "description": "search users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "search users",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ユーザーID",
                        "name": "user_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "名前",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "年齢",
                        "name": "age",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "職種大分類",
                        "name": "job_large_type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "職種中分類",
                        "name": "job_middle_type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "職種小分類",
                        "name": "job_small_type_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "職種名",
                        "name": "job_name",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "就業期間",
                        "name": "job_term",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "メッセージID",
                        "name": "message_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/error_handling.APIError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "error_handling.APIError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "details": {
                    "type": "object"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "message_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "models.Messages": {
            "type": "array",
            "items": {
                "$ref": "#/definitions/models.Message"
            }
        },
        "models.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "job_large_type_id": {
                    "type": "string"
                },
                "job_middle_type_id": {
                    "type": "string"
                },
                "job_name": {
                    "type": "string"
                },
                "job_small_type_id": {
                    "type": "string"
                },
                "job_term": {
                    "type": "integer"
                },
                "messages": {
                    "type": "object",
                    "$ref": "#/definitions/models.Messages"
                },
                "name": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:1323",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "Swagger Example API",
	Description: "This is a sample server Petstore server.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
